import org.apache.tools.ant.filters.FixCrLfFilter

plugins {
	id "no.nils.wsdl2java" version "0.8"
	id "com.jfrog.artifactory" version "3.1.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'java-library-distribution'

repositories {
	maven { url 'http://10.31.1.105:8081/artifactory/libs-release' }
}

group = 'com.checkmarx'
version = '8.4.0' + "-" + getDate()
compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 7
targetCompatibility = 7

jar.doFirst {
	manifest {
		attributes	'Implementation-Title': project.description,
		'Implementation-Version': project.version,
		'Implementation-URL': 'http://www.checkmarx.com',
		'Main-Class': 'com.checkmarx.cxconsole.CxConsoleLauncher',
		'Class-Path': configurations.runtime.files.collect {"lib/$it.name"}.join(' ')
		
		if(System.env.BUILD_NUMBER){
			attributes 'Implementation-Build': System.env.BUILD_NUMBER
		}
		if(System.env.GIT_COMMIT){
			attributes 'Repository-Version': System.env.GIT_COMMIT
		}
	}
}

tasks.withType(Tar){
	enabled = false
	compression = Compression.GZIP
}

dependencies {
	compile  	'commons-collections:commons-collections:3.2.1',
			'org.apache.commons:commons-lang3:3.4',
			'log4j:log4j:1.2.14',
			'org.jdom:jdom:1.1.3',
			'com.checkmarx.components:zipper:1.+',
			'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.1',
			'org.apache.cxf:cxf-rt-transports-http-jetty:3.1.1'
}

wsdl2java {
	generatedWsdlDir = file("build/generated-sources")  // target directory for generated source code
	wsdlDir = file("src/main/config/com/checkmarx/cxcviewer/ws") // define to support incremental build
	wsdlsToGenerate = [
		[
			'-mark-generated',
			'-p',
			'com.checkmarx.cxviewer.ws.resolver',
			'-client',
			'src/main/config/com/checkmarx/cxcviewer/ws/cxwsresolver.wsdl'
		],
		[
			'-mark-generated',
			'-p',
			'com.checkmarx.cxviewer.ws.generated',
			'-client',
			'src/main/config/com/checkmarx/cxcviewer/ws/CxCLIWebServiceV1.wsdl']
	]
	cxfVersion = "3.1.1"
}

distributions {
	main {
		baseName = 'CxConsolePlugin'
		contents {
			from('src/main/scripts'){
				filter{
					it.replaceAll('cx_console\\.jar' , jar.archiveName )
				}
				filter(FixCrLfFilter.class,
						eol:FixCrLfFilter.CrLf.newInstance("lf"))
			}
			from('src/main') {
				include 'config/krb5.conf'
			}
			from ('src/main/resources'){
				include 'cx_console.properties'
				filter{
					it.replaceAll('\\$\\{pom\\.version}' , version)
				}
				into 'config'
			}
		}
	}
}

def getDate() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd-HHmm')
	return formattedDate
}
